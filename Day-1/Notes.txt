-export default prefix is a standard JS syntax that lets you mark the main function in a file so it can
be imported in the future
-never nest definitions of components inside components

Syntax	Export statement	Import statement
Default	export default function Button() {}	import Button from './Button.js';
Named	export function Button() {}	import { Button } from './Button.js';

This empty tag is called a Fragment. Fragments let you group things without leaving any trace in the browser HTML tree.
<> </>  is a Fragment

As text directly inside a JSX tag: <h1>{name}'s To Do List</h1> works, but <{tag}>Gregorio Y. Zara's To Do List</{tag}> will not.
As attributes immediately following the = sign: src={avatar} will read the avatar variable, but src="{avatar}" will pass the string "{avatar}".

The next time you see {{ and }} in JSX, know that it’s nothing more than an object inside the JSX curlies!
-=
There’s nothing wrong with repetitive code—it can be more legible. But at times you may value conciseness. Some components forward all of their props to their children, like how this Profile does with Avatar. Because they don’t use any of their props directly, it can make sense to use a more concise “spread” syntax:

function Profile(props) {
  return (
    <div className="card">
      <Avatar {...props} />
    </div>
  );
}

==
However, props are immutable—a term from computer science meaning “unchangeable”. When a component needs to change its props (for example, in response to a user interaction or new data), it will have to “ask” its parent component to pass it different props—a new object! Its old props will then be cast aside, and eventually the JavaScript engine will reclaim the memory taken by them.


==
8/8
Props are attributes you pass to a JSX object like className, src, alt etc.
Props to things like <img> are predefined.
However, you can pass any props to your OWN components to customize them.


If you pass JSX between brackets of a prop that references its children, it will act on it
ex:
function DivSurruond({children}){
    return(<div>
        {children}
    </div>);
}



function test(){
    <DivSurruond>
    
    <p>Im in a divd</p>
    </DivSurruond>
}
